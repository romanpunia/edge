# Include headers and libraries of external dependencies
set(VI_OPENSSL ON CACHE BOOL "Enable openssl library")
set(VI_ZLIB ON CACHE BOOL "Enable zlib library")
set(VI_MONGOC ON CACHE BOOL "Enable mongo-c-driver library")
set(VI_POSTGRESQL ON CACHE BOOL "Enable libpq library")
set(VI_SQLITE ON CACHE BOOL "Enable sqlite library")
if (VI_OPENSSL)
	find_path(OpenSSL_LOCATION openssl/aes.h)
	if (OpenSSL_LOCATION)
		target_include_directories(vitex PRIVATE ${OpenSSL_LOCATION})
		find_package(OpenSSL QUIET)
		if (NOT OpenSSL_FOUND)
			find_library(OpenSSL_FOUND "ssl")
			find_library(OpenCRYPTO_FOUND "crypto")
			if (OpenSSL_FOUND AND OpenCRYPTO_FOUND)
				set(OPENSSL_LIBRARIES "${OpenSSL_FOUND};${OpenCRYPTO_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_OPENSSL)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_OPENSSL)
		endif()
		if (OpenSSL_FOUND OR OPENSSL_LIBRARIES)
			if (DEFINED OPENSSL_LIBRARIES)
				string(STRIP "${OPENSSL_LIBRARIES}" OPENSSL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${OPENSSL_LIBRARIES})
				message(STATUS "Load library @openssl - OK")
			else()
				target_link_libraries(vitex PRIVATE OpenSSL::SSL OpenSSL::Crypto)
				message(STATUS "Load package @openssl - OK")
			endif()
		else()
			message("Load library @openssl - lib not found")
		endif()
	else()
		message("Load library @openssl - include not found")
	endif()
    unset(OpenSSL_LOCATION CACHE)
    unset(OpenSSL_FOUND CACHE)
    unset(OPENSSL_LIBRARIES CACHE)
    unset(OpenCRYPTO_FOUND CACHE)
    unset(LIB_EAY_DEBUG CACHE)
    unset(LIB_EAY_RELEASE CACHE)
    unset(SSL_EAY_DEBUG CACHE)
    unset(SSL_EAY_RELEASE CACHE)
    unset(OPENSSL_APPLINK_SOURCE CACHE)
endif()
if (VI_ZLIB)
	find_path(ZLIB_LOCATION zlib.h)
	if (ZLIB_LOCATION)
		target_include_directories(vitex PRIVATE ${ZLIB_LOCATION})
		find_package(ZLIB QUIET)
		if (NOT ZLIB_FOUND)
			find_library(ZLIB_FOUND "zlib")
			if (ZLIB_FOUND)
				set(ZLIB_LIBRARIES "${ZLIB_FOUND}")
				target_compile_definitions(vitex PRIVATE -DVI_ZLIB)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_ZLIB)
		endif()
		if (ZLIB_FOUND OR ZLIB_LIBRARIES)
			if (DEFINED ZLIB_LIBRARIES)
				string(STRIP "${ZLIB_LIBRARIES}" ZLIB_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${ZLIB_LIBRARIES})
				message(STATUS "Load library @zlib - OK")
			else()
				target_link_libraries(vitex PRIVATE ZLIB::ZLIB)
				message(STATUS "Load package @zlib - OK")
			endif()
		else()
			message("Load library @zlib - lib not found")
		endif()
	else()
		message("Load library @zlib - include not found")
	endif()
    unset(ZLIB_LOCATION CACHE)
    unset(ZLIB_FOUND CACHE)
    unset(ZLIB_LIBRARIES CACHE)
endif()
if (VI_MONGOC)
	find_path(MONGOC_LOCATION mongoc.h PATH_SUFFIXES "libmongoc-1.0")
	find_path(BSON_LOCATION bson.h PATH_SUFFIXES "libbson-1.0")
	if (MONGOC_LOCATION AND BSON_LOCATION)
		target_include_directories(vitex PRIVATE ${MONGOC_LOCATION})
		target_include_directories(vitex PRIVATE ${BSON_LOCATION})
		find_package(mongo-c-driver CONFIG QUIET)
		if (NOT mongo-c-driver_FOUND)
			find_library(MONGOC_LIBRARY "mongoc-1.0")
			find_library(BSONC_LIBRARY "bson-1.0")
			if (MONGOC_LIBRARY AND BSONC_LIBRARY)
				set(MONGOC_LIBRARIES "${MONGOC_LIBRARY};${BSONC_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_MONGOC)
				unset(mongoc-c-driver_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_MONGOC)
		endif()
		if (mongo-c-driver_FOUND OR MONGOC_LIBRARIES)
			if (DEFINED MONGOC_LIBRARIES)
				string(STRIP "${MONGOC_LIBRARIES}" MONGOC_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${MONGOC_LIBRARIES})
				message(STATUS "Load library @mongo-c-driver - OK")
			else()
				target_link_libraries(vitex PRIVATE mongo-c-driver::mongo-c-driver)
				message(STATUS "Load package @mongo-c-driver - OK")
			endif()
		else()
			message("Load library @mongo-c-driver - lib not found")
		endif()
	else()
		message("Load library @mongo-c-driver - include not found")
	endif()
    unset(MONGOC_LIBRARY CACHE)
    unset(BSONC_LIBRARY CACHE)
    unset(MONGOC_LOCATION CACHE)
    unset(mongo-c-driver_FOUND CACHE)
    unset(BSON_LOCATION CACHE)
    unset(BSON_LIBRARY CACHE)
    unset(bson-c-driver_FOUND CACHE)
    unset(MONGOC_LIBRARIES CACHE)
    unset(MONGOC_LIBRARY CACHE)
    unset(libbson-1.0_DIR CACHE)
    unset(mongo-c-driver_DIR CACHE)
endif()
if (VI_POSTGRESQL)
	find_path(POSTGRESQL_LOCATION libpq-fe.h PATH_SUFFIXES "libpq" PATHS "/usr/include/postgresql" "/usr/local/opt/libpq/include")
	if (POSTGRESQL_LOCATION)
		target_include_directories(vitex PRIVATE ${POSTGRESQL_LOCATION})
		find_package(PostgreSQL CONFIG QUIET)
		if (NOT PostgreSQL_FOUND)
			find_library(POSTGRESQL_LIBRARY NAMES "pq" "libpq" PATH_SUFFIXES "lib")
			if (POSTGRESQL_LIBRARY)
				set(PostgreSQL_LIBRARIES "${POSTGRESQL_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_POSTGRESQL)
				unset(PostgreSQL_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_POSTGRESQL)
		endif()
		if (PostgreSQL_FOUND OR PostgreSQL_LIBRARIES)
			if (DEFINED PostgreSQL_LIBRARIES)
				string(STRIP "${PostgreSQL_LIBRARIES}" PostgreSQL_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${PostgreSQL_LIBRARIES})
				message(STATUS "Load library @libpq - OK")
			else()
				target_link_libraries(vitex PRIVATE PostgreSQL::PostgreSQL)
				message(STATUS "Load package @libpq - OK")
			endif()
		else()
			message("Load library @libpq - lib not found")
		endif()
	else()
		message("Load library @libpq - include not found")
	endif()
    unset(POSTGRESQL_LIBRARY CACHE)
    unset(POSTGRESQL_LOCATION CACHE)
    unset(PostgreSQL_FOUND CACHE)
    unset(PostgreSQL_LIBRARIES CACHE)
    unset(PostgreSQL_DIR CACHE)
    unset(PostgreSQL_LIBRARY_DEBUG CACHE)
endif()
if (VI_SQLITE)
	find_path(SQLITE_LOCATION sqlite3.h)
	if (SQLITE_LOCATION)
		target_include_directories(vitex PRIVATE ${SQLITE_LOCATION})
		find_package(SQLite3 CONFIG QUIET)
		if (NOT SQLite3_FOUND)
			find_library(SQLITE_LIBRARY "sqlite3")
			if (SQLITE_LIBRARY)
				set(SQLite3_LIBRARIES "${SQLITE_LIBRARY}")
				target_compile_definitions(vitex PRIVATE -DVI_SQLITE)
				unset(SQLite3_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(vitex PRIVATE -DVI_SQLITE)
		endif()
		if (SQLite3_FOUND OR SQLite3_LIBRARIES)
			if (DEFINED SQLite3_LIBRARIES)
				string(STRIP "${SQLite3_LIBRARIES}" SQLite3_LIBRARIES)
				target_link_libraries(vitex PRIVATE ${SQLite3_LIBRARIES})
				message(STATUS "Load library @sqlite - OK")
			else()
				target_link_libraries(vitex PRIVATE SQLite3::SQLite3)
				message(STATUS "Load package @sqlite - OK")
			endif()
		else()
			message("Load library @sqlite - lib not found")
		endif()
	else()
		message("Load library @sqlite - include not found")
	endif()
    unset(SQLITE_LIBRARY CACHE)
    unset(SQLITE_LOCATION CACHE)
    unset(SQLite3_FOUND CACHE)
    unset(SQLite3_LIBRARIES CACHE)
    unset(SQLite3_DIR CACHE)
    unset(SQLite3_LIBRARY_DEBUG CACHE)
endif()