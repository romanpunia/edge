#Resolve headers, refs and linkage
set(TH_USE_RESHADE ON CACHE BOOL "Enable SPIR-V and Glslang")
if (TH_USE_RESHADE)
	find_path(SPIRV_LOCATION spirv.hpp PATH_SUFFIXES "spirv")
	find_path(SPIRV_LOCATION spirv_cross.hpp PATH_SUFFIXES "spirv_cross")
	find_path(GLSLANG_LOCATION ShaderLang.h PATH_SUFFIXES "glslang/Public")
	if (SPIRV_LOCATION AND SPIRV_LOCATION AND GLSLANG_LOCATION)
		string(REPLACE "/Public" "" GLSLANG_LOCATION ${GLSLANG_LOCATION})
		target_include_directories(tomahawk PRIVATE ${SPIRV_LOCATION})
		target_include_directories(tomahawk PRIVATE ${SPIRV_LOCATION})
		target_include_directories(tomahawk PRIVATE ${GLSLANG_LOCATION})
		find_package(spirv_cross_core QUIET)
		find_package(spirv_cross_cpp QUIET)
		find_package(spirv_cross_glsl QUIET)
		find_package(spirv_cross_hlsl QUIET)
		find_package(spirv_cross_msl QUIET)
		find_package(spirv_cross_reflect QUIET)
		find_package(spirv_cross_util QUIET)
		if (NOT spirv_cross_core_FOUND OR NOT spirv_cross_cpp_FOUND OR NOT spirv_cross_glsl_FOUND OR NOT spirv_cross_hlsl_FOUND OR NOT spirv_cross_msl_FOUND OR NOT spirv_cross_reflect_FOUND OR NOT spirv_cross_util_FOUND)
			find_library(SPIRV_CORE_LIBRARY "spirv-cross-core")
			find_library(SPIRV_CORE_LIBRARY_D "spirv-cross-cored")
			find_library(SPIRV_CPP_LIBRARY "spirv-cross-cpp")
			find_library(SPIRV_CPP_LIBRARY_D "spirv-cross-cppd")
			find_library(SPIRV_GLSL_LIBRARY "spirv-cross-glsl")
			find_library(SPIRV_GLSL_LIBRARY_D "spirv-cross-glsld")
			find_library(SPIRV_HLSL_LIBRARY "spirv-cross-hlsl")
			find_library(SPIRV_HLSL_LIBRARY_D "spirv-cross-hlsld")
			find_library(SPIRV_MSL_LIBRARY "spirv-cross-msl")
			find_library(SPIRV_MSL_LIBRARY_D "spirv-cross-msld")
			find_library(SPIRV_REFLECT_LIBRARY "spirv-cross-reflect")
			find_library(SPIRV_REFLECT_LIBRARY_D "spirv-cross-reflectd")
			find_library(SPIRV_UTIL_LIBRARY "spirv-cross-util")
			find_library(SPIRV_UTIL_LIBRARY_D "spirv-cross-utild")
			set(SPIRV_RELEASE SPIRV_CORE_LIBRARY AND SPIRV_CPP_LIBRARY AND SPIRV_GLSL_LIBRARY AND SPIRV_HLSL_LIBRARY AND SPIRV_MSL_LIBRARY AND SPIRV_REFLECT_LIBRARY AND SPIRV_UTIL_LIBRARY)
			set(SPIRV_DEBUG SPIRV_CORE_LIBRARY_D AND SPIRV_CPP_LIBRARY_D AND SPIRV_GLSL_LIBRARY_D AND SPIRV_HLSL_LIBRARY_D AND SPIRV_MSL_LIBRARY_D AND SPIRV_REFLECT_LIBRARY_D AND SPIRV_UTIL_LIBRARY_D)
		endif()
		if ((spirv_cross_core_FOUND AND spirv_cross_cpp_FOUND AND spirv_cross_glsl_FOUND AND spirv_cross_hlsl_FOUND AND spirv_cross_msl_FOUND AND spirv_cross_reflect_FOUND AND spirv_cross_util_FOUND) OR SPIRV_RELEASE)
			if (SPIRV_RELEASE)
				if (SPIRV_DEBUG)
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_CORE_LIBRARY} debug ${SPIRV_CORE_LIBRARY_D})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_CPP_LIBRARY} debug ${SPIRV_CPP_LIBRARY_D})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_GLSL_LIBRARY} debug ${SPIRV_GLSL_LIBRARY_D})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_HLSL_LIBRARY} debug ${SPIRV_HLSL_LIBRARY_D})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_MSL_LIBRARY} debug ${SPIRV_MSL_LIBRARY_D})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_REFLECT_LIBRARY} debug ${SPIRV_REFLECT_LIBRARY_D})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_UTIL_LIBRARY} debug ${SPIRV_UTIL_LIBRARY_D})
				else()
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_CORE_LIBRARY})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_CPP_LIBRARY})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_GLSL_LIBRARY})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_HLSL_LIBRARY})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_MSL_LIBRARY})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_REFLECT_LIBRARY})
					target_link_libraries(tomahawk PRIVATE optimized ${SPIRV_UTIL_LIBRARY})
					message("SPIR-V debug libraries were not found")
				endif()
				message(STATUS "SPIR-V libraries found")
			else()
				target_link_libraries(tomahawk PRIVATE spirv-cross-core spirv-cross-cpp spirv-cross-glsl spirv-cross-hlsl spirv-cross-msl spirv-cross-reflect spirv-cross-util)
				message(STATUS "SPIR-V target libraries found")
			endif()
		else()
			message("SPIR-V libraries were not found")
		endif()	
		find_package(glslang QUIET)
		if (NOT glslang_FOUND)
			find_library(glslang_FOUND "glslang")
			find_library(glslangd_FOUND "glslangd")
			if (glslang_FOUND)
				set(GLSLANG_LIBRARY "${glslang_FOUND}")
			endif()
			if (glslangd_FOUND)
				set(GLSLANG_LIBRARY_D "${glslangd_FOUND}")
			endif()
		endif()
		if (glslang_FOUND OR GLSLANG_LIBRARY)
			if (DEFINED GLSLANG_LIBRARY)
				string(STRIP "${GLSLANG_LIBRARY}" GLSLANG_LIBRARY)
				if (DEFINED GLSLANG_LIBRARY_D)
					target_link_libraries(tomahawk PRIVATE optimized ${GLSLANG_LIBRARY} debug ${GLSLANG_LIBRARY_D})
				else()
					target_link_libraries(tomahawk PRIVATE optimized ${GLSLANG_LIBRARY})
					message("Glslang debug library was not found")
				endif()
				message(STATUS "Glslang library found")
			else()
				target_link_libraries(tomahawk PRIVATE glslang::HLSL glslang::SPIRV glslang::glslang glslang::OGLCompiler)
				message(STATUS "Glslang target library found")
			endif()
		else()
			message("Glslang library was not found")
		endif()
		if (((spirv_cross_core_FOUND AND spirv_cross_cpp_FOUND AND spirv_cross_glsl_FOUND AND spirv_cross_hlsl_FOUND AND spirv_cross_msl_FOUND AND spirv_cross_reflect_FOUND AND spirv_cross_util_FOUND) OR SPIRV_RELEASE) AND (glslang_FOUND OR GLSLANG_LIBRARY))
			target_compile_definitions(tomahawk PRIVATE -DTH_HAS_RESHADE)
		endif()
	else()
		message("SPIR-V and/or Glslang libraries were not found")
	endif()
endif()

#Cleanup
unset(SPIRV_LOCATION CACHE)
unset(SPIRV_LOCATION CACHE)
unset(GLSLANG_LOCATION CACHE)
unset(spirv_cross_cpp_FOUND CACHE)
unset(spirv_cross_glsl_FOUND CACHE)
unset(spirv_cross_hlsl_FOUND CACHE)
unset(spirv_cross_msl_FOUND CACHE)
unset(glslang_FOUND CACHE)
unset(glslangd_FOUND CACHE)
unset(SPIRV_CORE_LIBRARY CACHE)
unset(SPIRV_CORE_LIBRARY_D CACHE)
unset(SPIRV_CPP_LIBRARY CACHE)
unset(SPIRV_CPP_LIBRARY_D CACHE)
unset(SPIRV_GLSL_LIBRARY CACHE)
unset(SPIRV_GLSL_LIBRARY_D CACHE)
unset(SPIRV_HLSL_LIBRARY CACHE)
unset(SPIRV_HLSL_LIBRARY_D CACHE)
unset(SPIRV_MSL_LIBRARY CACHE)
unset(SPIRV_MSL_LIBRARY_D CACHE)
unset(SPIRV_REFLECT_LIBRARY CACHE)
unset(SPIRV_REFLECT_LIBRARY_D CACHE)
unset(SPIRV_UTIL_LIBRARY CACHE)
unset(SPIRV_UTIL_LIBRARY_D CACHE)
unset(SPIRV_RELEASE CACHE)
unset(SPIRV_DEBUG CACHE)
unset(GLSLANG_LIBRARY CACHE)
unset(GLSLANG_LIBRARY_D CACHE)
unset(glslang_DIR CACHE)
unset(spirv_cross_core_DIR CACHE)
unset(spirv_cross_cpp_DIR CACHE)
unset(spirv_cross_glsl_DIR CACHE)
unset(spirv_cross_hlsl_DIR CACHE)
unset(spirv_cross_msl_DIR CACHE)
unset(spirv_cross_reflect_DIR CACHE)
unset(spirv_cross_util_DIR CACHE)