#Resolve platform for needed generator
if (DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    if (NOT CMAKE_GENERATOR_PLATFORM)
        if (CMAKE_SIZEOF_VOID_P EQUAL 8)
            if (WIN32)
                set(VCPKG_TARGET_TRIPLET "x64-windows")
            elseif (UNIX)
                set(VCPKG_TARGET_TRIPLET "x64-linux")
            elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
                set(VCPKG_TARGET_TRIPLET "x64-osx")
            endif()
            set(_VCPKG_TARGET_TRIPLET_ARCH "x64")
        else()
            if (WIN32)
                set(VCPKG_TARGET_TRIPLET "x86-windows")
            elseif (UNIX)
                set(VCPKG_TARGET_TRIPLET "x86-linux")
            elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
                set(VCPKG_TARGET_TRIPLET "x86-osx")
            endif()
            set(_VCPKG_TARGET_TRIPLET_ARCH "x86")
        endif()
    endif()
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" CACHE STRING "")
endif()

#Resource management system
function(file_size FILENAME OUT)
    file(READ "${FILENAME}" CONTENT HEX)
    string(LENGTH "${CONTENT}" CONTENT_LENGTH)
    math(EXPR CONTENT_LENGTH "${CONTENT_LENGTH} / 2")
    set(${OUT} ${CONTENT_LENGTH} PARENT_SCOPE)
endfunction()
function(add_resource_batch DIRECTORY OUTPUT)
    set(BUFFER_H "#ifndef HAS_SHADER_BATCH\n#define HAS_SHADER_BATCH\n\nnamespace shader_batch\n{\n\textern void foreach(void* context, void(*callback)(void*, const char*, const unsigned char*, unsigned))\;\n}\n#endif")
    set(BUFFER_CPP "#include \"shaders.h\"\n\nnamespace shader_batch\n{\n\tvoid foreach(void* context, void(*callback)(void*, const char*, const unsigned char*, unsigned))\n\t{\n\t\tif (!callback)\n\t\t\treturn\;\n")
    file(GLOB_RECURSE BINARIES ${DIRECTORY}/*)
    foreach(BINARY ${BINARIES})
        string(REPLACE "${DIRECTORY}" "" FILENAME ${BINARY})
        string(REPLACE "${DIRECTORY}/" "" FILENAME ${BINARY})
        string(REGEX REPLACE "\\.| |-" "_" VARNAME ${FILENAME})
        string(REPLACE "/" "_" VARNAME ${VARNAME})
        string(TOLOWER ${VARNAME} VARNAME)
        file(READ ${BINARY} FILEDATA LIMIT 32768 HEX)
		file_size(${BINARY} FILESIZE)
        if (NOT FILEDATA STREQUAL "")
            string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," FILEDATA ${FILEDATA})
            string(APPEND BUFFER_CPP "\n\t\tconst unsigned char ${VARNAME}[] = { ${FILEDATA} }\;\n\t\tcallback(context, \"${FILENAME}\", ${VARNAME}, ${FILESIZE})\;\n")
        endif()
    endforeach()
    string(APPEND BUFFER_CPP "\t}\n}")
    file(WRITE ${OUTPUT}.h ${BUFFER_H})
    file(WRITE ${OUTPUT}.cpp ${BUFFER_CPP})
    message(STATUS "Resource defs have been written to: ${OUTPUT}.h")
    message(STATUS "Resource files have been written to: ${OUTPUT}.cpp")
endfunction()