#Resolve headers, refs and linkage
find_path(MONGOC_LOCATION mongoc.h PATH_SUFFIXES "libmongoc-1.0")
find_path(BSON_LOCATION bson.h PATH_SUFFIXES "libbson-1.0")
if (MONGOC_LOCATION AND BSON_LOCATION)
    target_include_directories(tomahawk PRIVATE ${MONGOC_LOCATION})
    target_include_directories(tomahawk PRIVATE ${BSON_LOCATION})
    find_package(mongo-c-driver CONFIG QUIET)
    if (NOT mongo-c-driver_FOUND)
        find_library(THAWK_MONGOC_LIBRARY "mongoc-1.0")
        find_library(THAWK_BSONC_LIBRARY "bson-1.0")
        if (THAWK_MONGOC_LIBRARY AND THAWK_BSONC_LIBRARY)
            set(MONGOC_LIBRARIES "${THAWK_MONGOC_LIBRARY};${THAWK_BSONC_LIBRARY}")
            target_compile_definitions(tomahawk PRIVATE -DTHAWK_HAS_MONGOC)
            unset(mongoc-c-driver_FOUND CACHE)
        endif()
    else()
        target_compile_definitions(tomahawk PRIVATE -DTHAWK_HAS_MONGOC)
    endif()
    if (mongo-c-driver_FOUND OR MONGOC_LIBRARIES)
        if (DEFINED MONGOC_LIBRARIES)
            string(STRIP "${MONGOC_LIBRARIES}" MONGOC_LIBRARIES)
            target_link_libraries(tomahawk PRIVATE ${MONGOC_LIBRARIES})
            message(STATUS "MongoDB library found")
        else()
            target_link_libraries(tomahawk PRIVATE mongo-c-driver::mongo-c-driver)
            message(STATUS "MongoDB target library found")
        endif()
    else()
        message(WARNING "MongoDB library was not found")
    endif()
else()
    message(WARNING "MongoDB library was not found")
endif()

#Cleanup
unset(THAWK_MONGOC_LIBRARY CACHE)
unset(THAWK_BSONC_LIBRARY CACHE)
unset(MONGOC_LOCATION CACHE)
unset(mongo-c-driver_FOUND CACHE)
unset(BSON_LOCATION CACHE)
unset(BSON_LIBRARY CACHE)
unset(bson-c-driver_FOUND CACHE)
unset(MONGOC_LIBRARIES CACHE)