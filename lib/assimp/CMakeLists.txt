#Resolve headers, refs and linkage
set(TH_USE_ASSIMP ON CACHE BOOL "Enable Assimp library")
if (TH_USE_ASSIMP)
	find_path(ASSIMP_LOCATION assimp/scene.h)
	if (ASSIMP_LOCATION)
		if (NOT WIN32 OR NOT DEFINED ENV{VCPKG_ROOT} OR MSVC)
			target_include_directories(tomahawk PRIVATE ${ASSIMP_LOCATION})
			if (MSVC)
				find_package(assimp CONFIG QUIET)
			endif()
			if (NOT assimp_FOUND)
				find_library(assimp_FOUND "assimp")
				if (assimp_FOUND)
					set(ASSIMP_LIBRARIES "${assimp_FOUND}")
					target_compile_definitions(tomahawk PRIVATE -DTH_HAS_ASSIMP)
				endif()
			else()
				target_compile_definitions(tomahawk PRIVATE -DTH_HAS_ASSIMP)
			endif()
		else()
			message(WARNING "Assimp library by @vcpkg can be used on Windows only under MSVC")
			set(ASSIMP_REJECT TRUE)
		endif()
		if (assimp_FOUND OR ASSIMP_LIBRARIES)
			if (DEFINED ASSIMP_LIBRARIES AND NOT MSVC)
				string(STRIP "${ASSIMP_LIBRARIES}" ASSIMP_LIBRARIES)
				target_link_libraries(tomahawk PRIVATE ${ASSIMP_LIBRARIES})
				message(STATUS "Assimp library found")
			else()
				target_link_libraries(tomahawk PRIVATE assimp::assimp)
				message(STATUS "Assimp target library found")
			endif()
		else()
			if (NOT ASSIMP_REJECT)
				message(WARNING "Assimp library was not found")
			endif()
		endif()
	else()
		if (NOT ASSIMP_REJECT)
			message(WARNING "Assimp library was not found")
		endif()
	endif()
endif()

#Cleanup
unset(ASSIMP_LOCATION CACHE)
unset(ASSIMP_LIBRARIES CACHE)
unset(ASSIMP_REJECT CACHE)
unset(assimp_FOUND CACHE)
unset(assimp_DIR CACHE)
unset(irrlicht_DIR CACHE)
unset(kubazip_DIR CACHE)
unset(minizip_DIR CACHE)
unset(poly2tri_DIR CACHE)
unset(polyclipping_DIR CACHE)
unset(utf8cpp_DIR CACHE)