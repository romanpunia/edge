#Resolve headers, refs and linkage
set(TH_USE_MONGOC ON CACHE BOOL "Enable MongoC library")
if (TH_USE_MONGOC)
	find_path(MONGOC_LOCATION mongoc.h PATH_SUFFIXES "libmongoc-1.0")
	find_path(BSON_LOCATION bson.h PATH_SUFFIXES "libbson-1.0")
	if (MONGOC_LOCATION AND BSON_LOCATION)
		target_include_directories(tomahawk PRIVATE ${MONGOC_LOCATION})
		target_include_directories(tomahawk PRIVATE ${BSON_LOCATION})
		find_package(mongo-c-driver CONFIG QUIET)
		if (NOT mongo-c-driver_FOUND)
			find_library(MONGOC_LIBRARY "mongoc-1.0")
			find_library(BSONC_LIBRARY "bson-1.0")
			if (MONGOC_LIBRARY AND BSONC_LIBRARY)
				set(MONGOC_LIBRARIES "${MONGOC_LIBRARY};${BSONC_LIBRARY}")
				target_compile_definitions(tomahawk PRIVATE -DTH_HAS_MONGOC)
				unset(mongoc-c-driver_FOUND CACHE)
			endif()
		else()
			target_compile_definitions(tomahawk PRIVATE -DTH_HAS_MONGOC)
		endif()
		if (mongo-c-driver_FOUND OR MONGOC_LIBRARIES)
			if (DEFINED MONGOC_LIBRARIES)
				string(STRIP "${MONGOC_LIBRARIES}" MONGOC_LIBRARIES)
				target_link_libraries(tomahawk PRIVATE ${MONGOC_LIBRARIES})
				message(STATUS "MongoDB library found")
			else()
				target_link_libraries(tomahawk PRIVATE mongo-c-driver::mongo-c-driver)
				message(STATUS "MongoDB target library found")
			endif()
		else()
			message("MongoDB library was not found")
		endif()
	else()
		message("MongoDB library was not found")
	endif()
endif()

#Cleanup
unset(MONGOC_LIBRARY CACHE)
unset(BSONC_LIBRARY CACHE)
unset(MONGOC_LOCATION CACHE)
unset(mongo-c-driver_FOUND CACHE)
unset(BSON_LOCATION CACHE)
unset(BSON_LIBRARY CACHE)
unset(bson-c-driver_FOUND CACHE)
unset(MONGOC_LIBRARIES CACHE)
unset(MONGOC_LIBRARY CACHE)
unset(libbson-1.0_DIR CACHE)
unset(mongo-c-driver_DIR CACHE)